syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.sustain";
option java_outer_classname = "SustainQueryService";

package sustain;

// Used as a proxy service, allowing the front-end client to encapsulate a JSON-formatted
// message into a gRPC message and send it to this JsonProxy service. This service then
// takes that JSON-formatted message and converts it into an appropriate gRPC message,
// as defined by the ModelRequest message type.
service JsonProxy {
  rpc ModelQuery(JsonModelRequest) returns (stream JsonModelResponse) {}
  rpc SlidingWindowQuery(JsonSlidingWindowRequest) returns (stream JsonSlidingWindowResponse) {}
}

message JsonSlidingWindowRequest {
  string json = 1;
}

message JsonSlidingWindowResponse {
  string json = 2;
}

message JsonModelRequest {
  string json = 1;
}

message JsonModelResponse {
  string json = 1;
}

service Sustain {

  // Query multiple collections and join the results together
  rpc CompoundQuery (CompoundRequest) returns (stream CompoundResponse) {}

  // Counts the number of documents in a MongoDB collection
  rpc CountQuery (CountRequest) returns (stream CountResponse) {}

  // Create a Spark Model on a collection
  rpc ModelQuery (ModelRequest) returns (stream ModelResponse) {}

  // Issue a query directly from the gRPC client to MongoDB
  rpc DirectQuery (DirectRequest) returns (stream DirectResponse) {}

  rpc DruidDirectQuery (DruidDirectRequest) returns (stream DruidDirectResponse) {}

  rpc SlidingWindowQuery (SlidingWindowRequest) returns (stream SlidingWindowResponse) {}

  rpc EchoQuery (DirectRequest) returns (DirectResponse) {}
}

message SlidingWindowRequest {
  repeated string gisJoins = 1;
  string collection = 2;
  string feature = 3;
  int32 days = 4;
}

message SlidingWindowResponse {
  string gisJoin = 1;
  repeated string movingAverages = 2;
}

/* --- Modeling requests/responses --- */

// Supported modeling categories
enum ModelType {
  K_MEANS_CLUSTERING = 0;
  LINEAR_REGRESSION = 1;
  BISECTING_K_MEANS = 2;
  GAUSSIAN_MIXTURE = 3;
  POWER_ITERATION_CLUSTERING = 4;
  LATENT_DIRICHLET_ALLOCATION = 5;
  R_FOREST_REGRESSION = 6;
  G_BOOST_REGRESSION = 7;
}

// MongoDB collection attributes for modeling
message Collection {
  string name = 1;
  string label = 2;
  string gisJoinKey = 3; // GISJOIN field name ("COUNTY_GISJOIN", "STATE_GISJOIN", "GISJOIN", etc.)
  repeated string features = 4;
}

// gRPC client modeling request
message ModelRequest {
  ModelType type = 1; // Enum type of model to build (LINEAR_REGRESSION, BISECTING_K_MEANS, etc.)
  repeated string gisJoins = 2; // List of GISJOINs to train/test models for
  repeated Collection collections = 3; // MongoDB collection name/fields/label to use for model

  // ModelRequest will contain one of the following, with more specific parameters, etc
  KMeansClusteringRequest kMeansClusteringRequest = 4;
  LinearRegressionRequest linearRegressionRequest = 5;
  BisectingKMeansRequest bisectingKMeansRequest = 6;
  GaussianMixtureRequest gaussianMixtureRequest = 7;
  LatentDirichletAllocationRequest latentDirichletAllocationRequest = 8;
  RForestRegressionRequest rForestRegressionRequest = 9;
  GBoostRegressionRequest gBoostRegressionRequest = 10;
}

// gRPC client modeling response
message ModelResponse {
  string gisJoin = 1;
  RegressionResponse regressionResponse = 2;
  ClusteringResponse clusteringResponse = 3;
}

/* --- ModelResponse subtypes --- */

message ClusteringResponse {
  int32 prediction = 1;
}

message RegressionResponse {
  double totalIterations = 1;
  double rmseResidual = 2;
  double r2Residual = 3;
  double intercept = 4;
  repeated double slopeCoefficients = 5;
  repeated double objectiveHistory = 6;
}

/* --- Clustering ModelRequest subtypes --- */

message KMeansClusteringRequest {
  int32 clusterCount = 1;
  int32 maxIterations = 2;
  CensusResolution resolution = 3;
}

message BisectingKMeansRequest {
  int32 clusterCount = 1;
  int32 maxIterations = 2;
  CensusResolution resolution = 3;
}

message GaussianMixtureRequest {
  int32 clusterCount = 1;
  int32 maxIterations = 2;
  CensusResolution resolution = 3;
}

message LatentDirichletAllocationRequest {
  int32 clusterCount = 1;
  int32 maxIterations = 2;
  CensusResolution resolution = 3;
}

/* --- Regression ModelRequest subtypes --- */

message LinearRegressionRequest {
  string loss = 1;
  string solver = 2;
  int32 maxIterations = 3;
  int32 aggregationDepth = 4;
  double elasticNetParam = 5;
  double epsilon = 6;
  double convergenceTolerance = 7;
  double regularizationParam = 8;
  bool setStandardization = 9;
  bool fitIntercept = 10;
}

message RForestRegressionRequest {
  bool isBootstrap = 1;
  double subsamplingRate = 2;
  int32 numTrees = 3;
  string featureSubsetStrategy = 4;
  string impurity = 5;
  int32 maxDepth = 6;
  int32 maxBins = 7;
  double trainSplit = 8;
  double minInfoGain = 9;
  int32 minInstancesPerNode = 10;
  double minWeightFractionPerNode = 11;
}

message GBoostRegressionRequest {
  double subsamplingRate = 1;
  double stepSize = 2;
  string featureSubsetStrategy = 3;
  string impurity = 4;
  int32 maxDepth = 5;
  int32 maxBins = 6;
  double trainSplit = 7;
  double minInfoGain = 8;
  int32 minInstancesPerNode = 9;
  double minWeightFractionPerNode = 10;
  string lossType = 11;
  int32 maxIter = 12;
}

enum SpatialOp {
  GeoWithin = 0;
  GeoIntersects = 1;
}

enum CensusResolution {
  State = 0;
  County = 1;
  Tract = 2;
  Block = 3;
}

enum JoinOperator {
  INNER_JOIN = 0;
  OUTER_JOIN = 1;
  LEFT_JOIN = 2;
  RIGHT_JOIN = 3;
}

enum ComparisonOperator {
  EQUAL = 0;
  GREATER_THAN = 1;
  LESS_THAN = 2;
  GREATER_THAN_OR_EQUAL = 3;
  LESS_THAN_OR_EQUAL = 4;
}

message CompoundRequest {
  oneof FirstPredicate {
    Query first_query = 1;
    CompoundRequest first_compound_request = 2;
  }

  JoinOperator join = 3;

  oneof SecondPredicate {
    Query second_query = 4;
    CompoundRequest second_compound_request = 5;
  }
}

message CompoundResponse {
  string data = 1;
}


message Query {
  string host = 1;          // MongoDB hostname
  int32  port = 2;          // MongoDB port
  string collection = 3;    // MongoDB collection
  string query = 4;         // Json representation of a MongoDB query
}

message CountRequest {
  repeated string collections = 1;
}

message CountResponse {
  repeated int64 count = 1;
}

message DirectRequest {
  string collection = 1;
  string query = 2; // JSON representation of a MongoDB query
}

message DirectResponse {
  string data = 1;
}

message DruidDirectRequest {
  string query = 1; // JSON for druid native query
}

message DruidDirectResponse {
  string data = 1; // Will also be JSON
}